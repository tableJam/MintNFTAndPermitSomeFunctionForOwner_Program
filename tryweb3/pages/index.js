import Head from 'next/head'
import { useState,useEffect } from 'react'
import {ethers} from 'ethers'
import axios from 'axios'
import { memberNFTaddress, tokenBankAddress } from '../../cpnstracts'
import MemberNFT from '../contracts/MemberNFT.json'
import TokenBank from '../contracts/TokenBank.json'

export default function Home() {

  const [account, setAccount] = useState('')
  const [chainId, setChainId] = useState(false)
  const [tokenBalance, setTokenBalance] = useState('')
  const [bankBalance, setBankBalance] = useState('')
  const [bankTotalDeposit, setBankTotalDeposit] = useState('')
  const [nftOwner, setNftOwner] = useState(false)
  const [inputData, setInputData] = useState({ transferAddress: '', transferAmount: '', depositAmount: '', withdrawAmount: '' });
  const [items, setItems] = useState([])
  const goerliId = '0x5'
  const zeroAddress = "0x0000000000000000000000000000000000000000";

  const checkMetamaskInstalled = async () => {
    return window.ethereum ? true : false;
  }

  const checkChainId = async () => {
    const chain = checkMetamaskInstalled() ? await window.ethereum.request({method: 'eth_chainId'}) : '';
    if (chain == goerliId) {
      console.log('chain👷‍♂️',chain)
      setChainId(true)
    }else {
      alert('connect goerli network🦊')
      setChainId(false)
    }
  }

  const connectWallet = async () => {
    try{
      const ethereum = checkMetamaskInstalled ? window.ethereum : null;
      const accounts = ethereum ? await ethereum.request({method: 'eth_requestAccounts'}) : 0;
      console.log(accounts);
      accounts ? setAccount(accounts[0]) : '';
      ethereum.on("accountsChanged", checkAccountChanged)
      ethereum.on('chainChanged', checkChainId)
    }catch(err){
      console.log(err);
    }
  }

  const checkAccountChanged = () => {
    setAccount('')
    setNftOwner(false)
    setItems([])
    setTokenBalance('')
    setBankBalance("")
    setBankTotalDeposit('')
    setInputData({ transferAddress: '', transferAmount: '', depositAmount: '', withdrawAmount: '' })

  }
   
  useEffect(() => {
    checkMetamaskInstalled() ? '' : alert('please install metamask 🦊');
    checkChainId();
  },[])

  return (
    <div className='flex flex-col items-center bg-slate-100 min-h-screen text-gray-900'>
      <Head>
        <title>Dapp🦖</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className='font-bold texl-6xl my-8 mt-8'>🦖🚀web3🧬🌋</h1>
      <h1 className='texl-6xl'>metamask: { checkMetamaskInstalled() ? '🦊': 'connect metamask' }</h1>
      <h1 className='texl-6xl'>network: goerli</h1>
      <div className='mt-8 mb-16 hover:rotate-180 hover:scale-105 transition duration-700 ease-in-out'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='160'
          height='160'
          viewBox='0 0 350 350'
        >
          <polygon points="0 0, 175 0, 175 175, 0 175" stroke="black" fill="#323234e3" />
          <polygon points="0 175, 175 175, 175 350, 0 350" stroke="black" fill="#323234e3" />
          <polygon points="175 0, 350 0, 350 175, 175 175" stroke="black" fill="#323234e3" />
          <polygon points="175 175, 350 175, 350 350, 175 350" stroke="black" fill="darkturquoise" />
        </svg>
      </div>
      <div className='flex mt-1'>
        {account ? (<>🦊: {account}</>): (<><button className='bg-blue-500 font-semibold py-2 px-4 text-white border-gray-500 rounded hover:border-transparent hover:bg-green-500 transition duration-300' onClick={connectWallet}>🦊connect</button></>)}
      </div>
    </div>
      )
}
